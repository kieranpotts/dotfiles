# ==============================================================================
# Git config
#
# This files establishes global options for the Git version control system.
# These settings are scoped to the system user.
#
# https://git-scm.com/docs/git-config
# ==============================================================================

[alias]

  # Git Aliases
  #
  # See:
  # - https://git-scm.com/docs/git-config#Documentation/git-config.txt-alias
  # - https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases
  #

  # `git aliases`
  #
  # List all configured aliases.
  #
  # Aliases are listed in the order they are defined in the Git config.
  #
  aliases = "! git config --get-regexp ^alias\\. | sed --expression s/^alias\\.// --expression s/\\ /\\ =\\ / #"

  # `git amend`
  #
  # Add all working changes to the last commit, including new (untracked) files.
  #
  # This is intended to be a quick operation for modifying work-in-progress.
  # Therefore, the message of the previous commit is maintained (`--no-edit`).
  #
  # This command may be useful in conjunction with `git wip`. You can also use
  # `git fixup` to achieve the same result. After this command you can run
  # `git reword` to change the message of the newly-remade commit.
  #
  # See also `git unamend`, which is capable of undoing this operation and
  # returning the commit to its previous state.
  #
  amend = ! git add --all && git commit --amend --no-edit --quiet

  # `git attr(ibute) "[comment]"`
  #
  # Shortcut for committing changes that improve quality attributes or implement
  # non-functional requirements.
  #
  ;attribute = ! sh ~/bin/git-attribute.sh

  # `git br [branch_name]`
  #
  # Create a branch, switch to it, and push upstream immediately.
  #
  # Pushing the branch into the "origin" repository sets up tracking from the
  # start of the branch's existence.
  #
  # This operation fails with an error if the branch name is already taken.
  #
  br = "! f() { git branch $1 && git checkout $1 && git push --set-upstream origin HEAD; }; f"

  # `git branches`
  #
  # List all branches by order of last commit.
  #
  # This is an alternative to `git branch`. It has nicer formatting and the
  # ordering is more useful. The most-recently revised branches are at the
  # bottom of the list.
  #
  branches = for-each-ref --sort='authordate:iso8601' --format='  %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)' refs/heads

  # `git cm (-m "[comment]")`
  #
  # Stage and commit all changes in the working tree.
  #
  # Both tracked and untracked files that have been added or modified in the
  # working tree are added to the repository's staging index, and then
  # immediately committed – this is a common Git workflow.
  #
  # Files that should remain untracked will need to be added to `gitignore`
  # rules. See https://git-scm.com/docs/gitignore. Alternatively, this alias
  # can be modified as follows. This will not stage files that have not yet been
  # "added" to the Git repository to track its changes:
  #
  # ```
  # commit --all
  # ```
  #
  # This is intended to be a fast operation so it disables any verifications
  # plugged in via Git hooks. Git hooks can be re-enabled again by adding the
  # `--verify` flag to the command.
  #
  cm = ! git add --all && git commit --quiet

  # `git changed [hash]`
  #
  # List the files added, deleted or changed in a specific commit.
  #
  changed = "! f() { git diff --name-status \"$1^\"..\"$1\"; }; f"

  # `git changes`
  #
  # Shows files staged for committing. Lists names and status (Added, Modified,
  # Deleted) of changed files.
  #
  # The `git staged` alias is identical. See also `git working` which shows the
  # current unstaged changes (working tree or working copy).
  #
  changes = diff --name-status --staged HEAD

  # `git cl`
  #
  # Shortcut for `git clone`.
  #
  cl = clone

  # `git co`
  #
  # Shortcut for `git checkout`.
  #
  # See also `git sw` which aliases `git switch`, a similar operation.
  #
  co = checkout

  # `git configure`
  #
  # Open the `~/.gitconfig` file in your default text editor.
  #
  configure = config --global --edit

  # `git contrib`
  #
  # List all contributors to the repository, ordered by their commit count.
  #
  # This alias is configured to show email addresses (`--email`) and total
  # commit counts (`--summary`). The contributors are ordered by their commit
  # count (`--numbered`) – the biggest committers first.
  #
  contrib = shortlog --email --summary --numbered

  # `git current`
  #
  # Show the name of the current branch.
  #
  # See also the `git upstream` alias, which returns the name of the tracked
  # upstream branch.
  #
  ; current = rev-parse --abbrev-ref HEAD # Git < 2.22
  current = branch --show-current

  # `git default`
  #
  # Fetches the name of the default branch, as configured in the "origin" repo.
  #
  # This alias parses the local `origin/HEAD` reference, which points to the
  # name of the default branch in the upstream "origin" repository.
  #
  # WARNING: The `origin/HEAD` ref can become out-of-date. It is set when you
  # `git clone` the upstream repository, and is not subsequently updated - it
  # is not changed by commands like `git fetch` or `git remote update`.
  # Therefore, if the default branch is subsequently changed in the reference
  # repository, it will need to be manually updated in all the clones for
  # this alias to work correctly.
  #
  # The easiest way to update the `origin/HEAD` ref is to run the following
  # command in the local repository. This command updates local knowledge of
  # what the remote considers to be the default branch.
  #
  # ```
  # git remote set-head origin --auto|-a
  # ```
  #
  # (NOTE: Prior to Git v1.8, the above command could set the `origin/HEAD` ref
  # incorrectly, due to potential ambiguity over what is the default branch when
  # the upstream `HEAD` referenes a commit SHA that is at the tip of more than
  # one branch. This issue is now resolved in Git and we can rely on `git clone`
  # and the above command setting `origin/HEAD` correctly in clones.)
  #
  # Alternatively, you can manually edit your `.git/refs/remotes/origin/HEAD`
  # file. If your default branch is named "dev", the contents of this file
  # should be:
  #
  # ```
  # ref: refs/remotes/origin/dev
  # ```
  #
  # Sources:
  # - https://haacked.com/archive/2014/07/28/github-flow-aliases/
  #
  ;default = ! sh ~/bin/git-default.sh

  # `git delete [branch_name]`
  #
  # Deletes both the local and upstream versions of a branch, if it is merged.
  #
  # This is a safe delete operation. It will succeed only if the commits in the
  # branch exist in other branches – in other words, the branch will be deleted
  # only if it does not contain any unique commits.
  #
  # The `push` operation will fail if remote tracking is not established for
  # the branch, and we can safely ignore that error as it just means there is
  # no upstream version of the branch to delete.
  #
  delete = "! f() { git branch --delete $1 && git push --delete origin $1 2> /dev/null; }; f"

  # `git delete-force [branch_name]`
  #
  # Deletes both the local and upstream versions of a branch, even if not merged
  #
  # This is a more dangerous version of `git delete`. This risks permanently
  # losing commits that don't exist in the history of any other branch, in
  # neither the local nor tracked upstream repositories.
  #
  delete-force = "! f() { git branch --delete --force $1 && git push --delete --force origin $1 2> /dev/null; }; f"

  # `git discard [file1] [file2]...`
  #
  # Discard working changes made to a particular file since the last commit.
  #
  # This is equivalent of the undo operation in VSCode's built-in Git GUI.
  #
  # Multiple file paths may be inputted, but additional options are not accepted
  # (they are disabled by the double hyphen `--` which marks the start of the
  # file list).
  #
  # Example:
  #
  # ```
  # git discard path/to/file.ext
  # ```
  #
  # This is a destructive operation. If you accidentally discard working
  # changes, they cannot be retrieved.
  #
  discard = checkout -q --

  # `git down`
  #
  # Maps to `git pull` with the rebasing integration strategy enabled.
  #
  # Use with the `--interactive` | `-i` option to edit local commit history.
  #
  # See also the `git up` alias, which mirrors this, and `git sync`, which
  # combines the two into a single operation.
  #
  down = pull --rebase --prune

  # `git download`
  #
  # Updates local objects and refs (tags and branches) to match all remotes.
  #
  # This command also removes any refs from the local repository that no longer
  # exist in any remote, including tags. Careful, any tags newly-created in the
  # downstream repository will be deleted unless they have been already pushed
  # upstream. Local branches will not be deleted, however – only references to
  # branches in the upstream repository are deleted.
  #
  download = fetch --all --tags --prune --prune-tags

  # `git experiment "[comment]"`
  #
  # Shortcut for committing experimental work, eg from technical spikes.
  #
  ;experiment = ! sh ~/bin/git-experiment.sh

  # `git feature "[comment]"`
  #
  # Shortcut for committing functional changes.
  #
  ;feature = ! sh ~/bin/git-feature.sh

  # `git fell ([main_branch])`
  #
  # Delete any local branches that have been merged into the default branch,
  # or that have been merged into another specified mainline branch.
  #
  # Usage:
  #
  # - `git fell`
  # - `git fell [main_branch]`
  #
  # It works like this:
  #
  # 1. Get a list of branches that have been merged into the specified branch,
  #    falling back on the default branch if there are no parameters.
  # 2. Use `grep -v` to print a list of branch names that DO NOT match the
  #    name of the target branch branch.
  # 3. Pipe this to `xargs`, which takes the standard input and executes the
  #    command `git branch --delete` for each line.
  # 4. In the event that all branches have been merged, the `branch --delete`
  #    operation will error with the message "fatal: branch name required".
  #    We can safely silence this output to stderr.
  #
  # This alias does not delete any corresponding upstream branches. This would
  # be a too-dangerous operation to automate, in case there are other shared
  # mainline tracks besides the default branch.
  #
  # Sources:
  # - https://haacked.com/archive/2014/07/28/github-flow-aliases/
  # - https://stackoverflow.com/a/18380712
  # - https://stackoverflow.com/a/41465769
  #
  ;fell = ! sh ~/bin/git-fell.sh

  # `git fetched`
  #
  # List all new commits since the last update to HEAD.
  #
  # This command is useful to see what has been committed locally since the last
  # `git fetch` operation.
  #
  # Append `--no-merges` to exclude merge commits from the log.
  #
  fetched = log ORIG_HEAD.. --graph --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr) %C(blue)<%an>' --abbrev-commit

  # `git filelog [path/to/file]`
  #
  # List all the commits that have modified a specific file.
  #
  filelog = "! f() { git log --graph --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr) %C(blue)<%an>' --abbrev-commit -- \"$1\"; }; f"

  # `git fix "[comment]"`
  #
  # Shortcut for committing bug fixes.
  #
  ;fix = ! sh ~/bin/git-fix.sh

  # `git fixup`
  #
  # Create a "fixup!" commit from the staging index + working tree, and
  # immediately rebase to squash the changes into the target commit. The
  # original commit message will be preserved.
  #
  # Use this to fix mistakes made in prior commits.
  #
  # Usage examples:
  #2
  # - `git fixup` or `git fixup HEAD` to fix the last commit
  # - `git fixup HEAD^` to fix the last-but-one commit
  # - `git fixup [sha]` to fix a prior commit
  # - `git fixup :/foo` to fix the most recent commit with "foo" in the message
  #
  # The outcome of `git fixup (HEAD)` will be identical to `git amend`.
  #
  # Additional parameters will be forwarded to the `commit` command.
  #
  # Sources:
  # - https://gist.github.com/simonwagner/9552064
  # - https://gist.github.com/peschee/6e8f490167037cb2a3489052501ae0bb
  # - https://words.filippo.io/git-fixup-amending-an-older-commit/
  # - https://medium.com/quick-code/useful-git-alias-926f27a27f92
  # - http://stackoverflow.com/a/21148981/460564
  # - https://stackoverflow.com/a/65305169
  #
  # See:
  # - https://greich.com/2021/10/08/git-fixup-clean-history/
  # - https://dev.to/koffeinfrei/the-git-fixup-workflow-386d
  # - https://stackoverflow.com/questions/3103589/
  # - https://git-scm.com/docs/git-rev-parse
  #
  fixup = "! f() { REV=$(git rev-parse ${1:-HEAD}) && git add --all && git commit --quiet --fixup=${REV} ${@:2} && git rebase --interactive --autosquash ${REV}~1; }; f"

  # `git ff|fast-forward`
  #
  # Do a fast-forward merge.
  #
  # This operation fails if there is divergent work in the current (source)
  # branch that is not in the target branch. In this situation, the current
  # branch much be rebased on the target branch beforehand.
  #
  fast-forward = merge --ff-only
  ff = fast-forward

  # `git graph`
  #
  # Detailed graph view of `git log`.
  #
  graph = log --oneline --decorate --graph --all

  # `git history`
  #
  # Cleaner `git log`.
  #
  # This command can be combined with other `log` options, eg `-n 10` to show
  # only the last 10 commits.
  #
  history = log --graph --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr) %C(blue)<%an>' --abbrev-commit

  # `git k`
  #
  # Opens gitk, Git's built-in repository browser.
  #
  # The usual gitk parameters can be supplied.
  #
  # https://git-scm.com/docs/gitk
  #
  k = ! gitk

  # `git last`
  #
  # Show detailed information on the last commit (`-1`).
  #
  last = log -1 HEAD --stat

  # `git maint "[comment]"`
  #
  # Shortcut for committing maintenance work.
  #
  # Note, we can't use the alias "maintenance" as this already exists as a
  # built-in Git command.
  #
  ;maint = ! sh ~/bin/git-maint.sh

  # `git orphan`
  #
  # Create a new branch with no parents.
  #
  # All files in the working tree will be added to the staging index, from where
  # they can be removed or edited further before the first commit being made
  # to the new branch.
  #
  # Unlike the branching aliases, the new branch cannot be immediately synced
  # with the upstream reference repository. That's because, until there is at
  # last one commit in an orphaned branch's history, there is no HEAD reference.
  #
  orphan = "! f() { git checkout --orphan $1; }; f"

  # `git orphan-fresh`
  #
  # Create a new branch with no parents, and remove all working changes.
  #
  # This is useful to start a fresh trunk, not based on any previous work.
  #
  orphan-fresh = "! f() { git switch --orphan $1 }; f"

  # `git pick`
  #
  # Shortcut for `git cherry-pick`.
  #
  # Because `cherry-pick` is annoying to type and an unnecessary metaphor for
  # a perfectly self-explanatory operation!
  #
  pick = cherry-pick

  # `git recent`
  #
  # Equivalent to the `git history` alias but limited to the last 25 commits.
  #
  recent = log --graph --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr) %C(blue)<%an>' --abbrev-commit --max-count=25

  # `git refactor "[comment]"`
  #
  # Shortcut for committing refactoring work.
  #
  ;refactor = ! sh ~/bin/git-refactor.sh

  # `git remotes`
  #
  # List the URLs of all remotes.
  #
  remotes = remote -v

  # `git reword`
  #
  # Change the message of the previous commit.
  #
  # Note: while this operation does not stage anything, files already staged
  # will be added to the previous commit, too.
  #
  # This also changes the hash of the previous commit, so the change may need
  # to be force-pushed into remotes that have the existing commit.
  #
  reword = commit --amend --quiet

  # `git status`
  #
  # Short-format view of the working tree's current state, with branch and
  # tracking info added for good measure.
  #
  state = status --short --branch

  # `git squash`
  #
  # Perform a `merge --squash` operation.
  #
  # This alias is designed to work regardless of the `merge.ff` setting. A
  # simple implementation would be:
  #
  # ```
  # git merge --squash
  # ```
  #
  # However, this fails if the `merge.ff` setting has the value `false`. This
  # is equivalent to using the `--no-ff` flag and this can't be used with
  # `--squash`. That's because you're asking Git to record an explicit merge
  # commit (`--no-ff`) and create a new normal commit (`--squash`) at the same
  # time. This mix of options doesn't make sense – it is explained well here:
  # https://stackoverflow.com/a/14322024
  #
  # The `--squash` option also does not always play nicely when `merge.ff` is
  # set to `"only"`. It is possible to combine `--squash` with `--ff-only` and
  # much of the time this works perfectly well. However, with this combination,
  # if both branches have unique commits, the "fast-forward only" test will fail
  # and therefore the subsequent squash operation will not happen. This
  # constraint is rarely useful, because conflicts could be resolved manually
  # and included in the squash commit.
  #
  # The solution is to combine the `--squash` flag with the `--ff` flag. This
  # is equivalent to setting `merge.ff` to `true` which disables the check to
  # perform the merge only if a fast-forward is possible. Conflicts will need
  # to be resolved manually.
  #
  # Note, the StackOverflow answer linked below suggests using the following
  # command. This uses the `-c` parameter to make a one-time configuration
  # change, overriding the default `merge.ff` setting. However, in testing it
  # seems sufficient to just use the `--ff` flag, which achieves the same thing.
  #
  # ```
  # squash = -c merge.ff=true merge --squash
  # ```
  #
  # Sources:
  # - https://stackoverflow.com/questions/36486966/
  #
  squash = merge --ff --squash

  # `git staged`
  #
  # Shows files staged for committing. Lists names and status (Added, Modified,
  # Deleted) of changed files.
  #
  # The `git changes` alias is identical. See also `git working` which shows the
  # current unstaged changes (working tree or working copy).
  #
  staged = diff --name-status --staged HEAD

  # `git stashed`
  #
  # Show the current number of entries in the stash.
  #
  stashed = status --show-stash

  # `git sw`
  #
  # Shortcut for `git switch`.
  #
  sw = switch

  # `git sync`
  #
  # Sync the local and tracked upstream branches by combining `pull` and `push`.
  #
  # The behavior of this alias is equivalent to VSCode's branch syncing
  # operation, and it is equivalent to chaining the `git down &&  git up`
  # operations. By using the rebasing strategy on `pull`, it maintains a
  # linear commit history even if there is divergent work between the local
  # and upstream branches.
  #
  # `git pull --rebase` will fail if the local branch does not yet track an
  # upstream branch. So this command is run only if tracking is already
  # established for the branch. If it is, the existing tracking is maintained –
  # this supports the local and tracked upstream branches having different names.
  #
  # If tracking is not yet established for the local branch, only a `push` is
  # done. The local branch is pushed to a branch of the same name in the
  # "origin" remote, and tracking is established for next time.
  #
  # Anything in the staging index plus working changes (including new as-yet
  # untracked files) are temporarily stashed. (We check the stash counts to make
  # sure we don't reapply work that was stashed earlier.) By temporarily
  # stashing work-in-progress we can pull remote updates into a dirty local
  # tree.
  #
  # This command works only after an initial commit has been made to the local
  # repository.
  #
  ;sync = ! sh ~/bin/git-sync.sh

  # `git tags`
  #
  # List all tags, sorted by commit date.
  #
  # Use `git download` to download all tags as well as branches from all the
  # upstream repositories.
  #
  tags = tag --list --sort=committerdate

  # `git track`
  #
  # Alias for `git add` and the opposite action of the `git untrack` alias.
  #
  # Adds specific files, defined by a path pattern, to the staging index.
  #
  # Examples:
  # - `git track --all|-A` adds all changes in whole working tree
  # - `git track .` adds all changes in current path
  # - `git track path/to/file` adds one or more specific files
  #
  track = add

  # `git tracking`
  #
  # Same as `git branches` but shows tracked upstream branches, too.
  #
  # Use `git upstream` to get only the name of the upstream branch that is
  # tracked by the current checked out downstream branch.
  #
  tracking = for-each-ref --sort='authordate:iso8601' --format='  %(color:green)%(authordate:relative)%09%(color:white)%(refname:short) %(color:cyan)➔ %(upstream:short)' refs/heads

  # `git unamend`
  #
  # If you have amended the previous commit (`git commit --amend`), this will
  # undo the amend operation, leaving the commit in its original state before
  # it was amended.
  #
  # The amended changes will be returned to the staging index. Change the
  # option from `--soft` to `--mixed` to have the amended changes left in the
  # working tree instead.
  #
  # If the previous operation was NOT an amend, the behavior of this command
  # will be identical to `git uncommit`.
  #
  unamend = reset HEAD@{1} --soft

  # `git uncommit`
  #
  # Undoes the last commit, discards the commit but re-stages the commit's
  # changes, ready for re-commit.
  #
  # Combine with `git undo` to full delete the staged changes. Executing
  # `git uncommit && git undo` is equivalent to `git reset HEAD~1 --hard`.
  #
  uncommit = reset HEAD~1 --soft

  # `git undo`
  #
  # Undoes all working and staged changes since the last commit.
  #
  # A simple but dangerous operation would be:
  #
  # ```
  # reset --hard
  # ```
  #
  # The effects of this operation could not be undone. The solution is to commit
  # all work-in-progress with the message "--SAVEPOINT--" then hard-reset the
  # branch to the prior commit. The "--SAVEPOINT--" commit is removed from the
  # branch's history but is still reachable via `git reflog`, and can therefore
  # be restored if a mistake was made with the reset.
  #
  # Source:
  # - https://haacked.com/archive/2014/07/28/github-flow-aliases/
  #
  undo = "! git add --all && git commit --quiet --message '--SAVEPOINT--' && git reset HEAD~1 --hard #"

  # `git unstage`
  #
  # Alias for `git reset`.
  #
  # Removes everything from the staging area, but doesn't delete any changes.
  #
  unstage = reset

  # `git untrack [path]`
  #
  # Untrack a file.
  #
  # The `rm` command combined with the `--cache` option removes a file from the
  # staging index but maintains the file in the working tree. When the next
  # commit is made, the untracked file(s) will be removed from the repository,
  # but not deleted from the local filesystem.
  #
  # This cannot be combined with additional options, because the `--` option
  # marks the start of the file list.
  #
  # Usage: `git untrack path/to/file.ext`
  #
  # See:
  # - https://git-scm.com/docs/git-rm
  #
  untrack = rm --cached --

  # `git up`
  #
  # Maps to `git push`, pushing tags and setting up tracking too.
  #
  # This command assumes that the tracked upstream branch will always have
  # an identical name to the local one.
  #
  # See also the `git down` alias, with mirrors this one, and `git sync`,
  # which combines the two into a single operation.
  #
  up = push --set-upstream origin HEAD --follow-tags

  # `git up-force`
  #
  # Force-push changes up to the remote.
  #
  # The `--force` flag should never be used against shared branches. The similar
  # `--force-with-lease` option is a little bit safer – it _partially_ protects
  # against destructive pushes. What it does is check that the downstream
  # branch has all the commits that exist in the upstream one, and therefore
  # we can be more confident that we will not overwrite work that other people
  # have committed there. But it is not a perfect failsafe. For example,
  # `--force-with-lease` will delete upstream commits when the downstream
  # repository has been updated with `git fetch` and not a subsequent `git merge`
  # (or a `git pull` which combines both operations). See the following
  # Atlassian article for more bakcground to the dangers of force pushing:
  # - https://blog.developer.atlassian.com/force-with-lease/
  #
  # Sources:
  # - https://pbassiner.github.io/blog/git_aliases_to_the_rescue.html
  #
  up-force = push --set-upstream origin HEAD --follow-tags --force-with-lease

  # `git upstream`
  #
  # Show the name of the tracked upstream branch.
  #
  # Silences fatal "no upstream configured" error if no upstream repository
  # is configured.
  #
  # Use `git tracking` to list all tracked branches.
  #
  upstream = ! git rev-parse --abbrev-ref --symbolic-full-name @{upstream} 2> /dev/null

  # `git versions`
  #
  # List tags prefixed with the lower case letter "v", sorted numerically.
  #
  versions = tag --list --sort=-version:refname v*

  # `git wip ("[comment]")`
  #
  # Shortcut for saving work-in-progress.
  #
  # If an unset-or-empty commit message is provided, "WIP" becomes the commit
  # message, else " - WIP" is appended to the custom message. For example,
  # the command `git wip "My commit message"` produces a new commit with the
  # log message "My commit message - WIP".
  #
  # Temporarily disables commit hooks, which may run time-consuming validation
  # routines.
  #
  # WIP commits are intended for backup purposes and to be fixed-up manually
  # later, or ultimately squashed into another branch. `git fixup` provides
  # an alternative workflow for WIP.
  #
  ;wip = ! sh ~/bin/git-wip.sh

  # `git working`
  #
  # Shows files in the working tree (ie unstaged changes). Lists names and
  # status (Added, Modified, Deleted) of changed files.
  #
  # See also `git staged` which shows the changes staged for committing.
  #
  working = diff --name-status

[core]

  # core.autocrlf
  #
  # Do not transform line endings to CRLF on Windows clients at checkout. This
  # is unnecessary since all modern code editors can be configured to support
  # Unix line endings (LF).
  #
  autocrlf = false

  # core.eol
  #
  # Normalizes the line endings to the Unix standard (LF) on all files that Git
  # auto-detects as being text based. This is equivalent to adding the following
  # rule to `.gitattributes`:
  #
  # ```
  # * text=auto eol=lf
  # ```
  #
  eol = lf

  # core.excludesFile
  #
  # Establish a global `.gitignore` file, which will be applied to all local
  # Git repositories but never be committed to any repository. Use this to
  # include TODOs, scratch files or any other personal materials to the
  # working directories of local Git repositories without running the risk of
  # those files being committed to the repository.
  #
  excludesFile = ~/local.gitignore

  # core.pager
  #
  # By default Git uses `less` to page output from commands like `log` and
  # `diff`. This option is used to set a different paging utility. I prefer
  # Delta: https://github.com/dandavison/delta
  #
  pager = delta

[delta]

  # Custom configuration for the Delta pager.

  # delta.light
  #
  # This needs to be set to true if your terminal has a light
  # background colour.
  #
  light = false

  # delta.line-numbers
  #
  # Show line numbers with diff output.
  #
  line-numbers = true

  # delta.navigation
  #
  # use `n` and `N` to move between diff sections.
  #
  navigate = true

  # delta.side-by-side
  #
  # Shows diffs in two vertical panels.
  #
  # https://dandavison.github.io/delta/side-by-side-view.html
  #
  side-by-side = true

[diff]

  # diff.colorMoved
  #
  # Color moved lines differently from changed lines. Equivalent to adding the
  # `--color-moved` flag to all `diff` operations. Options are "no", "default",
  # "plain", "zebra" and "dimmed_zebra".
  #
  # https://git-scm.com/docs/diff-options
  #
  colorMoved = default

  # diff.tool
  #
  # Use vimdiff as diff tool.
  #
  tool = vimdiff

[difftool]

  # difftool.prompt
  #
  # Don't prompt to open the configured difftool.
  #
  prompt = false

[fetch]

  # fetch.prune
  #
  # Automatically prune from the local repository any references to branches
  # and tags in the upstream repository that no longer exist there.
  #
  prune = true

[filter "lfs"]

  # filter "lfs"
  #
  # Default configuration for Git LFS. This configuration was added by the
  # `git lfs install` command. See: https://git-lfs.com/
  #
  process = git-lfs filter-process
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f

[init]

  # init.defaultBranch
  #
  # Change the name of the default branch, which gets sets when a new Git
  # repository is initialized the first time.
  #
  defaultBranch = dev

[interactive]

  # interactive.diffFilter
  #
  # When an interactive command such as `git add --patch` shows a colorized
  # diff, Git will pipe the diff through the shell command defined by this
  # configuration variable. The command may further markup the diff before
  # rendering. This can be used to pipe the diff through the Delta pager.
  # Delta's `--color-only` flag disables Delta from structurally changing the
  # diff, which is required to maintain compatibility with Git.
  #
  # https://git-scm.com/docs/git-config
  #
  diffFilter = delta --color-only

[merge]

  # merge.conflictStyle
  #
  # Specifies the style in which conflicted hunks are written out in working
  # tree files. The default option is "merge", which prints `=======` to
  # demarcateconflicting changes, which are themselves ringfenced by `<<<<<<<`
  # on one side and `>>>>>>>` on the other.
  #
  # An alternate style, "diff3", adds a `|||||||` marker and the original text
  # before the `=======` marker.
  #
  # https://git-scm.com/docs/merge-config
  #
  conflictStyle = diff3

  # merge.ff
  #
  # By default, Git does not create an explicit merge commit if merging a
  # commit that is a descendant of the current HEAD commit. Instead, the tip
  # of the current branch is simply fast-forwarded to the commit being merged.
  # Otherwise an explicit merge commit is created to resolve the divergent work
  # between the source and target branches. This is equivalent to using the
  # `--ff` flag or setting `merge.ff` to `true` – but it's easier to think of
  # this as "auto" mode, it means "fast-forward if possible".
  #
  # Whe `merge.ff` is set to `false` or the `--no-ff` flag is used, an explicit
  # merge commit will be recorded every time, even if a simple fast-forward
  # operation is possible. This option can't be used with `--squash` for reasons
  # that are well explained here: https://stackoverflow.com/a/14322024
  #
  # Finally, `merge.ff` can be set to `"only"` or the `--ff-only` flag used.
  # With this setting, Git will refuse to handle merges that cannot be simply
  # fast-forwarded. This means, where there is divergent work in the source
  # branch, the target branch must first be rebased on the source branch before
  # the merge operation will succeed.
  #
  # Squash (`--squash`) and fast-forwarding (`--ff-only`) are the two merge
  # strategies that achieve linear commit histories. It is possible to use
  # the two options together (`--squash --ff-only`). In this case, tf the source
  # branch has diverged from the target branch (so a fast-forward is not
  # possible) then the merge is rejected. Otherwise, rather than fast-forwarding,
  # all the extra commits on the target branch are squashed onto the source
  # branch, creating a new commit there.
  #
  # The following resource provides a good summary of Git merge strategies:
  # https://bit.ly/3ZZ2xOi
  #
  # My preference is to use `git merge` to perform true merges (ie creating
  # explicit merge commits, even when not needed to resolve conflicts) and to
  # use aliases such as `git squash` and `git fast-forward` to apply other
  # integration strategies.
  #
  ff = false

  # merge.tool
  #
  # Sets default for `git mergetool --tool=[tool]`. For vimdiff, the following
  # values are supported:
  #
  # - vimdiff:  use Vim with a custom layout as specified using separate hints
  # - vimdiff1: use Vim with a 2 panes layout: LOCAL and REMOTE
  # - vimdiff2: use Vim with a 3 panes layout: LOCAL, MERGED and REMOTE
  # - vimdiff3: use Vim where only the MERGED file is shown
  #
  tool = vimdiff3

[mergetool]

  # mergetool.prompt
  #
  # Don't prompt to open the configured mergetool.
  #
  prompt = false

[pull]

  # pull.rebase
  #
  # On `git pull` operations, always rebase the current branch on top of the
  # upstream branch after fetching. This helps to maintain a clean, linear
  # commit history.
  #
  rebase = true

[push]

  # push.followTags
  #
  # Push tags with commits by default. Equivalent to `--follow-tags` option.
  #
  followTags = true

  # push.default
  #
  # By default, push branches to branches of the same name on "origin". It
  # means you can `git push` excluding the `<remote> <branch>` parameters.
  #
  default = current

  # push.autoSetupRemote
  #
  # Automatically set up branch tracking. This is equivalent to using
  # `--set-upstream` | `-u` on `git push`. This option must be used in
  # conjunction with an appropriate `default` option, eg `default = current`.
  #
  # This option is enabled since Git 2.37.
  #
  autoSetupRemote = true

[rebase]

  # rebase.autosquash
  #
  # Add the `--autosquash` option to every `rebase` operation by default. This
  # will automatically handle commit messages that are prefixed "squash!",
  # "fixup!" or "amend!", changing the rebase action from "pick" to "squash",
  # "fixup" and "fixup -C" respectively.
  #
  # (Note: "fixup -C" is the same as "fixup" except the log message of the
  # "fixup!" commit replaces the message of the target commit, rather than the
  # other way around.)
  #
  # This is a better default because interactive rebase still gives us the
  # chance to edit the action per commit, before the rebase operation proper.
  #
  # This behavior can be disabled on a case-by-case basis by adding the
  # `--no-autosquash` option to the `git rebase` command.
  #
  # https://stackoverflow.com/a/66833278
  #
  autosquash = true

[safe]

  # safe.directory
  #
  # If your Git repositories are on an external drive, Git will consider them
  # to be owned by someone else and therefore unsafe by default. This setting
  # completely opts-out of this security check.
  #
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-safedirectory
  #
  directory = *

[include]

  # include.path
  #
  # Allow extensions to this base Git configuration via `~/local.gitconfig`.
  #
  # Note, the `include.path` config MUST be maintained at the bottom of the
  # `.gitconfig` template, as the contents of the included path are injected
  # at this position and we want the included file to have the opportunity to
  # override _anything_ in the `.gitconfig` template.
  #
  path = ~/local.gitconfig

#!/bin/sh

# ==============================================================================
# Change the name and email address of the author of the last commit, or an
# earlier commit in the current checked-out branche's history.
#
# Usage:
#
# ```
# git author ([sha])
# ```
#
# Source:
# - https://stackoverflow.com/a/
# ==============================================================================

# Absolute path to this script, e.g. `/path/to/dotfiles/bin/foo.sh`.
#
# TODO: `readlink` is not a POSIX utility, so need to find a better cross-
# platform way of achieving this.
FILE_PATH=$(readlink -f "$0")

# Absolute path to this script's parent directory, thus `/path/to/dotfiles/bin`.
BIN_PATH=$(dirname "$FILE_PATH")

# Absolute path this repo, thus `/path/to/dotfiles`.
REPO_PATH=$(dirname "$BIN_PATH")

# Source ANSI code variables.
source "${REPO_PATH}/lib/ansi-codes.sh"

# If there's an environment variable called `X_GIT_COMMIT_VERIFY` and its value
# is `0`, then we apply the `--no-verify` flag to the `git commit` operation.
VERIFY=${X_GIT_COMMIT_VERIFY:-1}

# Get the name of the current branch.
branch=$(git branch --show-current)

# Target revision.
REV=$(git rev-parse ${1:-HEAD})

# Checkout the target commit. Git repo enters a "detached HEAD" state.
git checkout ${REV}

echo ""
echo -e "${BLUE}Author's name (leave empty to use your default user.name config):${RESET}"
read -p "> " name
echo ""

if [ -z "${name}" ]; then

  if [ "$VERIFY" -eq "0" ]; then
    git commit --quiet --no-verify --amend --reset-author
  else
    git commit --quiet --amend --reset-author
  fi

else

  echo -e "${BLUE}Author's email address:${RESET}"
  read -p "> " email
  echo ""

  if [ -z "${email}" ]; then
    echo -e "${RED}Email not provided, exiting...${RESET}" >&2
    exit 1
  fi

  if [ "$VERIFY" -eq "0" ]; then
    git commit --quiet --no-verify --amend --author "${name} <${email}>"
  else
    git commit --quiet --amend --author "${name} <${email}>"
  fi

fi

# New commit.
NEW_REV=$(git rev-parse HEAD)
echo ${NEW_REV}

# Switch back to the previous branch then give the user the opportunity
# to rebase the branch on the new revision.
git switch ${branch}
git rebase --interactive ${NEW_REV}

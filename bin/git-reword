#!/bin/sh

# ==============================================================================
# Git alias to change the message of the previous commit, or an earlier
# specified commit.
#
# Usage:
#
# ```
# git reword ([hash])
# ```
#
# Anything in the staging index plus working changes (including new as-yet
# untracked files) are temporarily stashed, and the changes returned to
# the working tree (not the staging index) after the reword operation.
#
# This operation changes the hashes of one or more commits, so the change
# may need to be force-pushed into the remotes that have the existing commits.
# ==============================================================================

hash="${1}"

# If there's an environment variable called `X_GIT_COMMIT_VERIFY` and its value
# is `0`, then we apply the `--no-verify` flag to the `git commit` operation.
VERIFY=${X_GIT_COMMIT_VERIFY:-1}

# Stash all work-in-progress.
initialStashCount=$(git rev-list --walk-reflogs --count refs/stash 2> /dev/null)
git stash push --include-untracked

# if [ -z "${hash}" ]; then
  # TODO: Use interactive rebase to reword a specific commit.
  # See `git author` alias as an example implementation. Below is the
  # methology that LazyGit uses. Reference:https://stackoverflow.com/a/44293458
  # git rebase --interactive --autostash --keep-empty [prior-commit]
  # [select "edit" for target commit to reword, which should be first in the list]
  # git commit --allow-empty --amend --only -m "[new-commit-message]"
  # git rebase --continue
  #
  # Use `git rebase -i --root` to rebase to the start of the commit history.
# elif [ "$VERIFY" -eq "0" ]; then
if [ "$VERIFY" -eq "0" ]; then
  git commit --amend --no-verify --quiet
else
  git commit --amend --quiet
fi

# If work-in-progress was stashed, restore it to the working tree.
newStashCount=$(git rev-list --walk-reflogs --count refs/stash 2> /dev/null)
if [ "${newStashCount:-0}" != "${initialStashCount:-0}" ]; then
  git stash pop
fi

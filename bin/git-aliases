#!/bin/sh

# ==============================================================================
# Git alias to list all configured aliases.
#
# Usage:
#
# ```
# git aliases
# ```
# ==============================================================================

# Absolute path to this script, e.g. `/path/to/dotfiles/bin/foo.sh`.
#
# TODO: `readlink` is not a POSIX utility, so need to find a better cross-
# platform way of achieving this.
FILE_PATH=$(readlink -f "$0")

# Absolute path to this script's parent directory, thus `/path/to/dotfiles/bin`.
BIN_PATH=$(dirname "$FILE_PATH")

# Absolute path this repo, thus `/path/to/dotfiles`.
REPO_PATH=$(dirname "$BIN_PATH")

# Source ANSI code variables.
source "${REPO_PATH}/lib/ansi-codes.sh"

# Print help for each alias:
echo -e "${BRIGHT_BLUE}aliases${RESET} - Print this list of aliases"
echo -e "${BRIGHT_BLUE}amend${RESET} - Add all working changes to last commit, including new (untracked) files"
echo -e "${BRIGHT_BLUE}attribute (\"[msg]\")${RESET} - Create a commit with the message \"attribute: [msg]\""
echo -e "${BRIGHT_BLUE}author ([ref])${RESET} - Change the author of the last commit or an earlier specified commit"
echo -e "${BRIGHT_BLUE}backup ([branch])${RESET} - Create a backup of the current checked-out branch or a specified branch"
echo -e "${BRIGHT_BLUE}br ([branch])${RESET} - Branch from current position, switch to it, and push upstream to setup tracking"
echo -e "${BRIGHT_BLUE}branches${RESET} - List all branches by order of last commit"
echo -e "${BRIGHT_BLUE}changes ([ref])${RESET} - Show changes in a specified commit, or introduced to the working tree + staging area since the last commit"
echo -e "${BRIGHT_BLUE}cl ([params...])${RESET} - Shortcut for ${YELLOW}git clone"
echo -e "${BRIGHT_BLUE}cm (\"[msg]\")${RESET} - Quick ${YELLOW}git commit${RESET} operation: stage and commit all changes in the working tree, including new (untracked) files"
echo -e "${BRIGHT_BLUE}co ([params...])${RESET} - Shortcut for ${YELLOW}git checkout"
echo -e "${BRIGHT_BLUE}configure${RESET} - Open ${YELLOW}~/.gitconfig${RESET} in your default text editor"
echo -e "${BRIGHT_BLUE}contrib${RESET} - List all contributors, ordered by their total commit count"
echo -e "${BRIGHT_BLUE}current${RESET} - Show the name of the current branch"
echo -e "${BRIGHT_BLUE}default${RESET} - Show the name of the default branch, as configured in the \"origin\" repo"
echo -e "${BRIGHT_BLUE}delete ([br])${RESET} - Delete a local branch, but only if it's changes have been merged elsewhere"
echo -e "${BRIGHT_BLUE}discard [paths...]${RESET} - Discard working changes to one or more files"
echo -e "${BRIGHT_BLUE}down ([params...])${RESET} - Shortcut for ${YELLOW}git pull${RESET}, enforcing use of the rebase strategy"
echo -e "${BRIGHT_BLUE}download${RESET} - Improved ${YELLOW}git fetch${RESET}: download and prune local objects, tags and branches to match all remotes"
echo -e "${BRIGHT_BLUE}experiment (\"[msg]\")${RESET} - Create a commit with the message \"experiment: [comment]\""
echo -e "${BRIGHT_BLUE}feature (\"[msg]\")${RESET} - Create a commit with the message \"feature: [comment]\""
echo -e "${BRIGHT_BLUE}fell ([br])${RESET} - Delete any branches that have been merged into the default or the specified branch"
echo -e "${BRIGHT_BLUE}fetched${RESET} - List commits added by the last ${YELLOW}git fetch${RESET} operation"
echo -e "${BRIGHT_BLUE}ff ([br])${RESET} - Perform a fast-forward merge"
echo -e "${BRIGHT_BLUE}filelog [path]${RESET} - List al the commits that have changed a specific file"
echo -e "${BRIGHT_BLUE}fix (\"[msg]\")${RESET} - Create a commit with the message \"fix: [comment]\""
echo -e "${BRIGHT_BLUE}fixup ([ref])${RESET} - Fix something in the previous commit or an earlier specified commit"
echo -e "${BRIGHT_BLUE}graph${RESET} - Detailed ${YELLOW}git log"
echo -e "${BRIGHT_BLUE}history${RESET} - Clean ${YELLOW}git log${RESET}, paged"
echo -e "${BRIGHT_BLUE}last${RESET} - Show detailed information on the changes in the last commit"
echo -e "${BRIGHT_BLUE}maint (\"[msg]\")${RESET} - Create a commit with the message \"maintenance: [comment]\""
echo -e "${BRIGHT_BLUE}orphan [br]${RESET} - Create an orphaned branch, add working changes to staging index"
echo -e "${BRIGHT_BLUE}orphan-fresh [br]${RESET} - Create an orphaned branch, switch to it and empty the working tree"
echo -e "${BRIGHT_BLUE}pick ([params...])${RESET} - Shortcut for ${YELLOW}git cherry-pick"
echo -e "${BRIGHT_BLUE}recent${RESET} - Clean ${YELLOW}git log${RESET}, last 25 entries only"
echo -e "${BRIGHT_BLUE}refactor (\"[msg]\")${RESET} - Create a commit with the message \"refactor: [msg]\""
echo -e "${BRIGHT_BLUE}remotes${RESET} - List the URLs of all remotes"
echo -e "${BRIGHT_BLUE}resume${RESET} - Resume work-in-progress committed via the last ${YELLOW}git wip${RESET} operation"
echo -e "${BRIGHT_BLUE}reword ([ref])${RESET} - Change the message of the previous commit or an earlier commit; adds staged files to the commit, too"
echo -e "${BRIGHT_BLUE}squash${RESET} - Perform a ${YELLOW}git merge --squash${RESET} operation"
echo -e "${BRIGHT_BLUE}staged${RESET} - List files with changes staged for committing"
echo -e "${BRIGHT_BLUE}stashed${RESET} - Show the current number of stash entries"
echo -e "${BRIGHT_BLUE}state${RESET} - Concise view of ${YELLOW}git status"
echo -e "${BRIGHT_BLUE}sw ([params...])${RESET} - Shortcut for ${YELLOW}git switch"
echo -e "${BRIGHT_BLUE}sync${RESET} - Sync the local checked-out branch with its tracked upstream branch, maintaining linear history"
echo -e "${BRIGHT_BLUE}tags${RESET} - List all tags, sorted by commit date"
echo -e "${BRIGHT_BLUE}track [path]${RESET} - Start tracking a new file; alias for ${YELLOW}git add${RESET} and the opposite action of the ${YELLOW}git untrack${RESET} alias"
echo -e "${BRIGHT_BLUE}tracking${RESET} - Same as ${YELLOW}git branches${RESET} but shows tracked upstream branches, too"
echo -e "${BRIGHT_BLUE}unamend${RESET} - Undo the prior ${YELLOW}git amend${RESET} or ${YELLOW}git commit${RESET} operation"
echo -e "${BRIGHT_BLUE}uncommit${RESET} - Undo the last commit, return the changes to the staging index"
echo -e "${BRIGHT_BLUE}undo${RESET} - Reset to the last commit, undoing all staged and working changes; a savepoint commit is made so the work will be recoverable using ${YELLOW}git reflog"
echo -e "${BRIGHT_BLUE}unstage${RESET} - Alias for ${YELLOW}git reset${RESET}, this removes everything from the staging index, returning the changes to the working tree"
echo -e "${BRIGHT_BLUE}untrack [path]${RESET} - Untrack a specified file"
echo -e "${BRIGHT_BLUE}up${RESET} - Push commits up to the tracked upstream branch; push tags and set up tracking, too"
echo -e "${BRIGHT_BLUE}up-force${RESET} - Force-push changes up to the tracked upstream branch, overwriting own work but not other people's"
echo -e "${BRIGHT_BLUE}upstream${RESET} - Show the name of the tracked upstream branch"
echo -e "${BRIGHT_BLUE}versions${RESET} - List tags prefixed with the lower case letter \"v\", sorted numerically"
echo -e "${BRIGHT_BLUE}wip (\"[msg]\")${RESET} - Save work-in-progress; continue where you left off with ${YELLOW}git resume"
echo -e "${BRIGHT_BLUE}working${RESET} - List all changed files in the working tree"

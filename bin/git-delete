#!/bin/sh

# ==============================================================================
# Git alias to delete the local version of a branch.
#
# Usage:
#
# ```
# git delete ([branch])
# ```
#
# This is a safe delete operation. It will not, by default, force-delete local
# branches, but instead prompt for user confirmation if the branch contains
# work that is not merged elsewhere. Upstream branches are not deleted.
# ==============================================================================

# Absolute path to this script, e.g. `/path/to/dotfiles/bin/foo.sh`.
#
# TODO: `readlink` is not a POSIX utility, so need to find a better cross-
# platform way of achieving this.
FILE_PATH=$(readlink -f "$0")

# Absolute path to this script's parent directory, thus `/path/to/dotfiles/bin`.
BIN_PATH=$(dirname "$FILE_PATH")

# Absolute path this repo, thus `/path/to/dotfiles`.
REPO_PATH=$(dirname "$BIN_PATH")

# Source ANSI code variables.
source "${REPO_PATH}/lib/ansi-codes.sh"

# Was the target branch provided as a parameter?
branch="${1}"

# If not, let the user select from a list.
if [ -z "${branch}" ]; then

  branches=()
  eval "$(git for-each-ref --sort='-authordate:iso8601' --shell --format='branches+=(%(refname))' refs/heads/)"

  # TODO:
  # Remove main, master and current branch from list of available branches to delete.

  length=${#branches[@]}
  for (( i=0; i<${length}; i++ ))
  do
    branch_name="${branches[$i]}"

    # Remove refs/heads/ from start of branch name
    echo -e "${YELLOW}${i}${RESET} - ${branch_name:11}"
  done

  echo ""
  echo -e "${BLUE}Type the number of the branch you want to delete:${RESET}"

  read -p "> " index
  echo ""

  if [ -z "${index}" ]; then
    echo -e "${RED}Branch not provided, exiting...${RESET}" >&2
    exit 1
  fi

  # Remove refs/heads/ from start of branch name
  branch=${branches[index]:11}

fi

echo -e "${GREEN}Attempting deletion of ${REVERSED} ${branch} ${RESET}"

# Attempt to delete the local branch. Silence non-error output and capture
# errors. Respond to errors by asking the user if they want to try a force-delete.
git branch --quiet --delete ${branch} 2> /dev/null
EXIT_CODE_1=$?

if [ ${EXIT_CODE_1} -eq 1 ]; then

  echo ""
  echo -e "${RED}Branch deletion failed.${RESET}"
  echo "Would you like to force deletion of this branch?"
  echo "WARNING: This is a destructive operation. This risks permanently losing commits that don't exist in the history of any other local branch."
  read -p "Force delete? (y/n) " choice

  case "$choice" in
    y|Y )
      # Hide all errors from these commands. Basically, if these fail, the
      # branch almost certainly does not exist or is somehow protected from
      # deletion (for example, it is the current checked out branch).
      git branch --quiet --delete --force ${branch} 2> /dev/null
      echo -e "${GREEN}Done.${RESET}"
      ;;

    n|N )
      echo -e "${RED}Exiting...${RESET}"
      ;;

    * )
      echo -e "${RED}Exiting...${RESET}"
      ;;
  esac

else 
  echo -e "${GREEN}Done.${RESET}"
fi
